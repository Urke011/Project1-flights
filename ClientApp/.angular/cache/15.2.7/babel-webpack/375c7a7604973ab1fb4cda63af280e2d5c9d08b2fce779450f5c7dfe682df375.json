{"ast":null,"code":"import { inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from './auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    const currentUser = inject(AuthService).currentuser;\n    if (!currentUser) inject(Router).navigate(['/register-passenger']);\n    return true;\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,MAAM,QAAQ,eAAe;AAClD,SAA4EC,MAAM,QAAQ,iBAAiB;AAE3G,SAASC,WAAW,QAAQ,gBAAgB;;;;AAK5C,OAAM,MAAOC,SAAS;EAEpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAE5D;EACAC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B,MAAMC,WAAW,GAAGV,MAAM,CAACE,WAAW,CAAC,CAACS,WAAW;IAEnD,IAAI,CAACD,WAAW,EACdV,MAAM,CAACC,MAAM,CAAC,CAACW,QAAQ,CAAC,CAAC,qBAAqB,CAAC,CAAC;IAElD,OAAO,IAAI;EACb;;AAfWT,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAU,SAATV,SAAS;EAAAW,YAFR;AAAM","names":["inject","Router","AuthService","AuthGuard","constructor","authService","router","canActivate","route","state","currentUser","currentuser","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\urajkovic\\Desktop\\csharpApp\\Project1\\ClientApp\\src\\app\\auth\\auth.guard.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(private authService: AuthService, private router: Router) {\n\r\n  }\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n\n    const currentUser = inject(AuthService).currentuser;\r\n\r\n    if (!currentUser)\r\n      inject(Router).navigate(['/register-passenger']);\n\n    return true;\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}